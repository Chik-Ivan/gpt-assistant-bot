# -*- coding: utf-8 -*-
import sys
import logging
import openai
import os
import random
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from config import BOT_TOKEN, OPENAI_API_KEY
from aiogram.utils.executor import start_webhook
import datetime
from database import create_progress_stage  # type: ignore
from database import (
    create_pool,
    upsert_user,
    update_goal_and_plan,
    get_goal_and_plan,
    check_access,
    create_progress_stage,
    check_last_progress,
    mark_progress_completed,
    create_next_stage,
)  # type: ignore

from aiogram.utils.exceptions import BotBlocked
from keyboards import support_button
from aiogram.utils.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiohttp import web

WEBHOOK_HOST = os.getenv(
    "WEBHOOK_HOST"
)  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://gpt-assistant-bot-v.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

sys.stdout.reconfigure(encoding="utf-8")  # type: ignore

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

bot = Bot(token=BOT_TOKEN)  # type: ignore
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

from aiogram.types import BotCommand


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"),
        BotCommand(command="goal", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞"),
        BotCommand(command="support", description="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"),
    ]
    await bot.set_my_commands(commands)


# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
dialogues = {}
waiting_for_days = {}  # user_id: True/False ‚Äî –∂–¥—ë—Ç –ª–∏ –±–æ—Ç —Å—Ä–æ–∫
pool = None  # —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
waiting_for_completion = {}  # user_id: –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞, –µ—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# System prompt
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–Ω–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –≥–∏–±–∫–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞)
import re


def extract_days(text: str) -> int:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    numbers = re.findall(r"\d+", text)
    if numbers:
        return int(numbers[0])
    return 7  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""


# GPT-–æ—Ç–≤–µ—Ç + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏/–ø–ª–∞–Ω–∞
async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]

    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o", messages=dialogues[user_id], temperature=0.7
        )
        gpt_reply = response["choices"][0]["message"]["content"]  # type: ignore
        dialogues[user_id].append({"role": "assistant", "content": gpt_reply})

        if "–¶–µ–ª—å:" in gpt_reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in gpt_reply:
            goal = extract_between(gpt_reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = gpt_reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π)
            import datetime

            today = datetime.datetime.now()
            deadline = today + datetime.timedelta(days=7)
            deadline_str = deadline.strftime("%Y-%m-%d %H:%M:%S")
            await create_progress_stage(pool, user_id, stage=1, deadline=deadline_str)

        return gpt_reply

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {type(e).__name__}"


# /start
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    await upsert_user(pool, user_id, username, first_name)

    access = await check_access(pool, user_id)
    if not access:
        await message.reply(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=support_button,
        )
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    first_prompt = (
        "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π —Ç–∏–ø –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞, —Ü–µ–ª–∏ –ø–æ –¥–æ—Ö–æ–¥—É –∏ –ø–æ–º–æ—á—å –º–Ω–µ –∏—Ö –¥–æ—Å—Ç–∏—á—å. "
        "–ë—É–¥—å –º–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –¥–æ–≤–µ–¥–∏ –º–µ–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
    )
    first_response = await chat_with_gpt(user_id, first_prompt)
    await message.reply(first_response)


# –î–∏–∞–ª–æ–≥
@dp.message_handler()
async def handle_chat(message: Message):
    user_id = message.from_user.id
    user_text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    access = await check_access(pool, user_id)
    if not access:
        from keyboards import support_button

        await message.reply(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=support_button,
        )
        return

    # ‚è≥ –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    if waiting_for_days.get(user_id):
        days = extract_days(user_text)
        import datetime

        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        deadline_str = deadline.strftime("%Y-%m-%d %H:%M:%S")
        await create_progress_stage(pool, user_id, stage=1, deadline=deadline_str)

        await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π ‚úÖ")
        waiting_for_days[user_id] = False
        return

    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if user_id in waiting_for_completion:
        answer = user_text.lower()
        current_stage = waiting_for_completion[user_id]

        if "–¥–∞" in answer:
            await mark_progress_completed(pool, user_id, current_stage)
            await message.reply("–û—Ç–ª–∏—á–Ω–æ! üî• –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –±–∞–ª–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
            await create_next_stage(pool, user_id, stage=current_stage + 1)
            del waiting_for_completion[user_id]
            return

        elif "–Ω–µ—Ç" in answer:
            await message.reply(
                "–ü–æ–Ω–∏–º–∞—é. –ù–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å ‚Äî —Ç—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —Ü–µ–ª–∏ üòî\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–ª–∏ –æ—Ç–ª–æ–∂–∏–º?"
            )
            del waiting_for_completion[user_id]
            return

    # üí¨ –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å GPT
    response = await chat_with_gpt(user_id, user_text)
    await message.reply(response)

    # –µ—Å–ª–∏ GPT –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å—Ä–æ–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç
    if any(
        word in response.lower()
        for word in ["—Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç", "–∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", "–≥—Ä–∞—Ñ–∏–∫", "—Å—Ä–æ–∫"]
    ):
        waiting_for_days[user_id] = True


# /—Ü–µ–ª—å
@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    if goal:
        await message.reply(f"üéØ –¢–≤–æ—è —Ü–µ–ª—å:\n\n{goal}")
    else:
        await message.reply("–¶–µ–ª—å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥ —Å GPT.")


# /–ø–ª–∞–Ω
@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    if plan:
        await message.reply(f"üìÖ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n\n{plan}")
    else:
        await message.reply("–ü–ª–∞–Ω –µ—â—ë –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ —Å GPT.")


# /–ø–æ—Ç–¥–µ—Ä–∂–∫–∞
@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply(
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=support_button
    )
# ‚úÖ –ó–∞–ø–∞—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
    "üìÖ –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

# ‚úÖ GPT-3.5 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def generate_reminder_message():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞."}
            ],
            max_tokens=50,
            temperature=0.8,
        )
        text = response.choices[0].message["content"].strip()
        return text
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ GPT: {e}. –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return random.choice(REMINDER_TEXTS)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    try:
        users = await get_active_users(pool) # type: ignore
        for user in users:
            try:
                text = await generate_reminder_message()
                await bot.send_message(user["user_id"], text)
            except BotBlocked:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# üîß ON STARTUP
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    logging.info("Bot: GPT-Assistant –∑–∞–ø—É—â–µ–Ω")

    # ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour=18))  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
    scheduler.start()


# üõë ON SHUTDOWN
async def on_shutdown(app):
    await bot.delete_webhook()


# üöÄ RUN WEBHOOK
async def on_startup_webhook(dp):
    global pool
    pool = await create_pool()
    await bot.set_webhook(WEBHOOK_URL)
    await set_commands(bot)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown_webhook(dp):
    logging.warning("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
    await bot.delete_webhook()


if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup_webhook,
        on_shutdown=on_shutdown_webhook,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

# /–ü—Ä–≤–µ—Ä–∫–∞
@dp.message_handler(commands=["check"])
async def check_progress_handler(message: Message):
    user_id = message.from_user.id
    progress = await check_last_progress(pool, user_id)

    if not progress:
        await message.reply(
            "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞—á–∞—Ç–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é —Å GPT."
        )
        return

    stage = progress["stage"]
    completed = progress["completed"]
    checked = progress["checked"]

    if completed:
        await message.reply("‚úÖ –¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø. –ú–æ–ª–æ–¥–µ—Ü!")
        return

    if not checked:
        await message.reply(f"–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–∞–ø—É {stage}? –ù–∞–ø–∏—à–∏: –¥–∞ / –Ω–µ—Ç")
        waiting_for_days[user_id] = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
        waiting_for_completion[user_id] = stage  # type: ignore # –Ω–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç


@dp.errors_handler()
async def error_handler(update, exception):
    if isinstance(exception, TelegramAPIError):
        return True  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram

    try:
        await update.message.answer(
            "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button
        )
    except:
        pass

    return True


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
async def check_inactive_users():
    from database import get_users_for_reminder  # —Ç—ã —É–∂–µ —ç—Ç–æ –ø–∏—Å–∞–ª

    user_ids = await get_users_for_reminder(pool)
    for user_id in user_ids:
        try:
            await bot.send_message(
                user_id,
                "–ü—Ä–∏–≤–µ—Ç! –¢—ã –µ—â—ë –Ω–µ —Å–æ–æ–±—â–∏–ª, –∫–∞–∫ –∏–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞. –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É?",
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")


# –í on_startup ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def send_reminders():  # type: ignore
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = await get_all_users( # type: ignore
        pool
    )  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å user_id
    for user in users:
        try:
            # 50% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT
            if random.random() > 0.5:
                try:
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä."},
                            {
                                "role": "user",
                                "content": "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ.",
                            },
                        ],
                        max_tokens=50,
                        temperature=0.8,
                    )
                    text = response.choices[0].message["content"].strip() # type: ignore
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ GPT: {e}. –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
                    text = random.choice(REMINDER_TEXTS)
            else:
                text = random.choice(REMINDER_TEXTS)

            await bot.send_message(user["user_id"], text)
        except BotBlocked:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        except Exception as e:
            logging.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}"
            )


# ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π on_startup
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        check_inactive_users, CronTrigger(hour=10)
    )  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Ç—Ä–æ–º
    scheduler.add_job(send_reminders, CronTrigger(hour=18))  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º
    scheduler.start()

    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 10:00, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 18:00")

REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
    "üìÖ –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

