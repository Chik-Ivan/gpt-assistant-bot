# -*- coding: utf-8 -*-
import sys
import logging
import asyncio
import aiohttp
from keep_alive import keep_alive
import openai
import os
import random
from datetime import datetime

from aiogram.types import CallbackQuery
from aiogram.dispatcher import FSMContext
from states import GoalStates
from config import WEBHOOK_URL
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import  Message, BotCommand
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config import BOT_TOKEN, OPENAI_API_KEY
from database import (
    create_pool,
    upsert_user,
    check_access,
    update_goal_and_plan,
    get_goal_and_plan,
    create_progress_stage,
    mark_progress_completed,
    create_next_stage,
    check_last_progress,
    get_progress,
    get_users_for_reminder
)
from keyboards import support_button

# Webhook config
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

sys.stdout.reconfigure(encoding="utf-8")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="goal", description="–ú–æ—è —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ú–æ–π –ø–ª–∞–Ω"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="support", description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="test_reminder", description="–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)

# ==========================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
dialogues = {}
waiting_for_days = {}
waiting_for_completion = {}
pool = None

# ‚úÖ System Prompt
system_prompt = (
     "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
)

# ==========================
# –§—É–Ω–∫—Ü–∏–∏ GPT
def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""

def extract_days(text: str) -> int:
    import re
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=dialogues[user_id],
            temperature=0.7
        )
        reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": reply})

        if "–¶–µ–ª—å:" in reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in reply:
            goal = extract_between(reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)
            deadline = (datetime.datetime.now() + datetime.timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
            await create_progress_stage(pool, user_id, 1, deadline)

        return reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"

# ==========================
# ‚úÖ –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    await upsert_user(pool, user_id, message.from_user.username or "", message.from_user.first_name or "", False, 0, datetime.utcnow())

    if not await check_access(pool, user_id):
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    await message.reply(await chat_with_gpt(user_id, "–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥"))

@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¶–µ–ª—å:\n{goal}" if goal else "–¶–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω:\n{plan}" if plan else "–ü–ª–∞–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

@dp.message_handler(commands=["progress"])
async def progress_handler(message: Message):
    user_id = message.from_user.id
    data = await get_progress(pool, user_id)

    completed = data["completed"]
    total = data["total"]
    points = data["points"]

    total = max(total, 1)  # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ 0
    percent = int((completed / total) * 100)

    bar_length = 10
    filled_length = int(percent / 10)
    bar = "‚ñà" * filled_length + "‚ñë" * (bar_length - filled_length)

    text = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"{bar} {percent}%\n"
        f"‚úÖ –≠—Ç–∞–ø—ã: {completed}/{total}\n"
        f"üî• –ë–∞–ª–ª—ã: {points}"
    )

    if data["next_deadline"]:
        text += f"\nüìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {data['next_deadline'].strftime('%d %B')}"

    await message.reply(text)
@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá", reply_markup=support_button)

# ‚úÖ –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler()
async def handle_chat(message: Message):
    user_id = message.from_user.id
    if not await check_access(pool, user_id):
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return
    text = message.text
    if waiting_for_days.get(user_id):
        days = extract_days(text)
        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        await create_progress_stage(pool, user_id, 1, deadline.strftime("%Y-%m-%d %H:%M:%S"))
        await message.reply(f"‚úÖ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        waiting_for_days[user_id] = False
        return
    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        else:
            await message.reply("–ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è!")
        del waiting_for_completion[user_id]
        return
    response = await chat_with_gpt(user_id, text)
    await message.reply(response)
    if any(word in response.lower() for word in ["—Å—Ä–æ–∫", "–¥–µ–¥–ª–∞–π–Ω"]):
        waiting_for_days[user_id] = True

# ==========================
# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏!",
    "üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

async def generate_reminder_message():
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä."},
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)."}
            ],
            max_tokens=50, temperature=0.8
        )
        return resp["choices"][0]["message"]["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)



async def send_reminders():
    if pool is None:
        logging.warning("‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        users = await get_users_for_reminder()
        for user in users:
            user_id = user["user_id"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_stage = await check_last_progress(pool, user_id)
            if not current_stage or current_stage["completed"]:
                continue  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –∏ –ø–ª–∞–Ω (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            goal, plan = await get_goal_and_plan(pool, user_id)
            if not goal or not plan:
                continue

            stage_number = current_stage["stage"]
            deadline = current_stage["deadline"]
            delta_days = (deadline - datetime.datetime.now()).days

            # 40% —à–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∫–∏, 50% –∏–∑ –Ω–∏—Ö ‚Äî GPT
            if random.random() < 0.4:
                if random.random() > 0.5:
                    prompt = (
                        f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –Ω–∞ —ç—Ç–∞–ø–µ {stage_number} –∏–∑ –ø–ª–∞–Ω–∞: {plan}. "
                        f"–°–æ–∑–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–Ω. "
                        f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {deadline.strftime('%Y-%m-%d')}. –£–∫–∞–∂–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
                    )
                    try:
                        resp = openai.ChatCompletion.create(
                            model="gpt-3.5-turbo",
                            messages=[
                                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä, –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–π—Ç–∏ –¥–æ —Ü–µ–ª–∏."},
                                {"role": "user", "content": prompt}
                            ],
                            max_tokens=100,
                            temperature=0.8
                        )
                        text = resp["choices"][0]["message"]["content"].strip()
                    except Exception as e:
                        logging.error(f"GPT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback: {e}")
                        text = random.choice(REMINDER_TEXTS)
                else:
                    text = random.choice(REMINDER_TEXTS)

                await bot.send_message(user_id, text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

@dp.message_handler(commands=["test_reminder"])
async def test_reminder(message: Message):
    await message.reply("üß™ –ó–∞–ø—É—Å–∫–∞—é —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
    await send_reminders()
    await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await send_reminders()

async def test_reminder(message: Message):
    await send_reminders()
    await message.reply("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# ==========================
# ‚úÖ ON STARTUP
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour="10,18"))
    scheduler.start()

    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # üëá –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "–ø–∏–Ω–≥—É–µ–º" Render, —á—Ç–æ–±—ã webhook –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª—Å—è
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                data={"url": f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"}
            ) as resp:
                if resp.status == 200:
                    logging.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–¥")
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {resp.status}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook —á–µ—Ä–µ–∑ –∫–æ–¥: {e}")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

async def handle_root(request):
    return web.Response(text="‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", status=200)

app = web.Application()
app.router.add_get("/", handle_root)

# –ó–∞–ø—É—Å–∫ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=10000)
@dp.callback_query_handler(lambda c: c.data in ["fsm_restart", "fsm_continue"], state="*")
async def fsm_choice_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "fsm_restart":
        await state.finish()
        await callback_query.message.edit_text("üîÅ –û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ. –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?")
        await GoalStates.waiting_for_goal.set()
    elif callback_query.data == "fsm_continue":
        await callback_query.message.edit_text("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.")

