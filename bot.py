# -*- coding: utf-8 -*-
import sys
import logging
import os
import re
import random
import datetime
import openai
from aiohttp import web
from aiogram.dispatcher.webhook import get_new_configured_app
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiohttp import web
from aiogram.utils.executor import start_webhook

from config import BOT_TOKEN, OPENAI_API_KEY
from keyboards import support_button
from database import (
    create_pool,
    upsert_user,
    update_goal_and_plan,
    get_goal_and_plan,
    check_access,
    create_progress_stage,
    check_last_progress,
    mark_progress_completed,
    create_next_stage,
    get_all_users,
)

# ==============================
# üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook –∏ –ø–æ—Ä—Ç–∞
# ==============================
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://gpt-assistant-bot-v.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

# ==============================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==============================
sys.stdout.reconfigure(encoding="utf-8")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ==============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ GPT
# ==============================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ==============================
# –ö–æ–º–∞–Ω–¥—ã
# ==============================
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"),
        BotCommand(command="goal", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞"),
        BotCommand(command="support", description="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"),
    ]
    await bot.set_my_commands(commands)

# ==============================
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ==============================
dialogues = {}
waiting_for_days = {}
waiting_for_completion = {}
pool = None

# ==============================
# GPT-–ø—Ä–æ–º—Ç
# ==============================
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
)

# ==============================
# –£—Ç–∏–ª–∏—Ç—ã
# ==============================
def extract_days(text: str) -> int:
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""

# ==============================
# GPT –ª–æ–≥–∏–∫–∞
# ==============================
async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o", messages=dialogues[user_id], temperature=0.7
        )
        gpt_reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": gpt_reply})

        if "–¶–µ–ª—å:" in gpt_reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in gpt_reply:
            goal = extract_between(gpt_reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = gpt_reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)

            today = datetime.datetime.now()
            deadline = today + datetime.timedelta(days=7)
            await create_progress_stage(pool, user_id, stage=1, deadline=deadline.strftime("%Y-%m-%d %H:%M:%S"))

        return gpt_reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {type(e).__name__}"

# ==============================
# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# ==============================
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    await upsert_user(pool, user_id, username, first_name)

    access = await check_access(pool, user_id)
    if not access:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    response = await chat_with_gpt(user_id, "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å.")
    await message.reply(response)

@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¢–≤–æ—è —Ü–µ–ª—å:\n\n{goal}" if goal else "–¶–µ–ª—å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n\n{plan}" if plan else "–ü–ª–∞–Ω –µ—â—ë –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=support_button)

@dp.message_handler(commands=["check"])
async def check_progress_handler(message: Message):
    user_id = message.from_user.id
    progress = await check_last_progress(pool, user_id)
    if not progress:
        await message.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞—á–∞—Ç–æ–≥–æ –ø–ª–∞–Ω–∞.")
        return
    stage, completed, checked = progress["stage"], progress["completed"], progress["checked"]
    if completed:
        await message.reply("‚úÖ –¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø. –ú–æ–ª–æ–¥–µ—Ü!")
    elif not checked:
        await message.reply(f"–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–∞–ø—É {stage}? –ù–∞–ø–∏—à–∏: –¥–∞ / –Ω–µ—Ç")
        waiting_for_days[user_id] = False
        waiting_for_completion[user_id] = stage

# ==============================
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (GPT-3.5 + fallback)
# ==============================
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏!",
    "üìÖ –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

async def generate_reminder_message():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."}],
            max_tokens=50,
            temperature=0.8,
        )
        return response.choices[0].message["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)

async def send_reminders():
    users = await get_all_users(pool)
    for user in users:
        try:
            await bot.send_message(user["user_id"], await generate_reminder_message())
        except BotBlocked:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

# ==============================
# Webhook –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# ==============================
async def on_startup_webhook(dp):
    global pool
    pool = await create_pool()
    await bot.set_webhook(WEBHOOK_URL)
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour=18))  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00
    scheduler.start()
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown_webhook(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp —Å–µ—Ä–≤–µ—Ä —Å aiogram
    app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)

    async def on_startup_webhook(app):
        global pool
        pool = await create_pool()
        await bot.set_webhook(WEBHOOK_URL)
        await set_commands(bot)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    async def on_shutdown_webhook(app):
        logging.warning("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        await bot.delete_webhook()

    app.on_startup.append(on_startup_webhook)
    app.on_shutdown.append(on_shutdown_webhook)

    # Health-check –¥–ª—è Render (—É–±–∏—Ä–∞–µ–º 404)
    async def health_check(request):
        return web.Response(text="OK", status=200)

    app.router.add_get("/", health_check)

    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)