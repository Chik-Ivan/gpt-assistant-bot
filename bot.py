# -*- coding: utf-8 -*-
import sys
import logging
import openai
import os
import random
import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config import BOT_TOKEN, OPENAI_API_KEY
from database import (
    create_pool,
    upsert_user,
    check_access,
    update_goal_and_plan,
    get_goal_and_plan,
    create_progress_stage,
    mark_progress_completed,
    create_next_stage,
    check_last_progress,
    get_progress,
    get_users_for_reminder
)
from keyboards import support_button

# Webhook config
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

sys.stdout.reconfigure(encoding="utf-8")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="goal", description="–ú–æ—è —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ú–æ–π –ø–ª–∞–Ω"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="support", description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="test_reminder", description="–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)

# ==========================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
dialogues = {}
waiting_for_days = {}
waiting_for_completion = {}
pool = None

# ‚úÖ System Prompt
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –ü–æ–º–æ–≥–∞–µ—à—å —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏, –≤—ã—è–≤–ª—è—Ç—å –±–∞—Ä—å–µ—Ä—ã, —Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω.\n"
    "–õ–æ–≥–∏–∫–∞: –≤—ã—è—Å–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ü–µ–ª—å (–≤ –¥–µ–Ω—å–≥–∞—Ö), —Å—Ä–æ–∫–∏. –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø–æ –Ω–µ–¥–µ–ª—è–º.\n"
    "–ì–æ–≤–æ—Ä–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ."
)

# ==========================
# –§—É–Ω–∫—Ü–∏–∏ GPT
def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""

def extract_days(text: str) -> int:
    import re
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=dialogues[user_id],
            temperature=0.7
        )
        reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": reply})

        if "–¶–µ–ª—å:" in reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in reply:
            goal = extract_between(reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)
            deadline = (datetime.datetime.now() + datetime.timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
            await create_progress_stage(pool, user_id, 1, deadline)

        return reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {e}"

# ==========================
# ‚úÖ –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    await upsert_user(pool, user_id, message.from_user.username or "", message.from_user.first_name or "")

    if not await check_access(pool, user_id):
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    await message.reply(await chat_with_gpt(user_id, "–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥"))

@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¶–µ–ª—å:\n{goal}" if goal else "–¶–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω:\n{plan}" if plan else "–ü–ª–∞–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

@dp.message_handler(commands=["progress"])
async def progress_handler(message: Message):
    data = await get_progress(pool, message.from_user.id)
    text = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['completed']} –∏–∑ {data['total']} —ç—Ç–∞–ø–æ–≤\n"
        f"üî• –ë–∞–ª–ª—ã: {data['points']}\n"
    )
    if data["next_deadline"]:
        text += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {data['next_deadline'].strftime('%d %B')}"
    await message.reply(text)

@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá", reply_markup=support_button)

# ‚úÖ –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler()
async def handle_chat(message: Message):
    user_id = message.from_user.id
    if not await check_access(pool, user_id):
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return
    text = message.text
    if waiting_for_days.get(user_id):
        days = extract_days(text)
        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        await create_progress_stage(pool, user_id, 1, deadline.strftime("%Y-%m-%d %H:%M:%S"))
        await message.reply(f"‚úÖ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        waiting_for_days[user_id] = False
        return
    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        else:
            await message.reply("–ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è!")
        del waiting_for_completion[user_id]
        return
    response = await chat_with_gpt(user_id, text)
    await message.reply(response)
    if any(word in response.lower() for word in ["—Å—Ä–æ–∫", "–¥–µ–¥–ª–∞–π–Ω"]):
        waiting_for_days[user_id] = True

# ==========================
# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏!",
    "üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

async def generate_reminder_message():
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä."},
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)."}
            ],
            max_tokens=50, temperature=0.8
        )
        return resp["choices"][0]["message"]["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)

async def send_reminders():
    try:
        users = await get_users_for_reminder(pool)
        for user in users:
            # ‚úÖ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: —à–∞–Ω—Å 40%, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            if random.random() < 0.4:
                text = await generate_reminder_message() if random.random() > 0.5 else random.choice(REMINDER_TEXTS)
                await bot.send_message(user["user_id"], text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

@dp.message_handler(commands=["test_reminder"])
async def test_reminder(message: Message):
    await send_reminders()
    await message.reply("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

# ==========================
# ‚úÖ ON STARTUP
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour="10,18"))  # –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.session.close()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω.")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )