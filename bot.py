import os
import random
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.executor import start_webhook
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import (
    create_pool, save_user, check_access,
    get_goal, get_plan, save_goal, save_plan,
    get_progress, get_users_for_reminder, update_last_reminder
)

# ‚úÖ ENV
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: gpt-assistant-bot-v.onrender.com
WEBHOOK_PATH = f"/bot{TOKEN}"
WEBHOOK_URL = f"https://{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
openai.api_key = OPENAI_KEY

REMINDER_TEXTS = [
    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç–µ—Å—å?",
    "–ü–æ–º–Ω–∏—Ç–µ, –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—Ç—å –ø–ª–∞–Ω–∞!"
]

SYSTEM_PROMPT = """
"–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
"""

support_btn = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/Abramova_school_support")
)

# ‚úÖ GPT: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def generate_reminder_message():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {"role": "user", "content": "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á."}
            ],
            temperature=0.8
        )
        return response["choices"][0]["message"]["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)

# ‚úÖ GPT: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–∏ –∏ –ø–ª–∞–Ω–∞
async def generate_goal_and_plan(user_text: str):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": f"–ú–æ—è —Ü–µ–ª—å: {user_text}"}
        ],
        temperature=0.7
    )
    return response["choices"][0]["message"]["content"].strip()

# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø–ª–∞–Ω)
async def send_reminders():
    pool = await create_pool()
    users = await get_users_for_reminder(pool)
    for user in users:
        if random.random() < 0.4:  # ~3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
            try:
                text = await generate_reminder_message()
                await bot.send_message(user["telegram_id"], text)
                await update_last_reminder(pool, user["telegram_id"])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user['telegram_id']}: {e}")

# ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler.add_job(send_reminders, "cron", hour="10,18")

# ‚úÖ /start
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    pool = await create_pool()
    await save_user(pool, str(message.from_user.id), message.from_user.username, message.from_user.first_name, message.from_user.id)
    access = await check_access(pool, str(message.from_user.id))

    if not access:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_btn)
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, –∏ —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏
@dp.message_handler(lambda m: not m.text.startswith('/'))
async def handle_goal_text(message: types.Message):
    pool = await create_pool()
    text = message.text
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω...")

    goal_and_plan = await generate_goal_and_plan(text)
    await save_goal(pool, str(message.from_user.id), text)
    await save_plan(pool, str(message.from_user.id), goal_and_plan)

    await message.answer(f"‚úÖ –¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{goal_and_plan}")

# ‚úÖ /goal
@dp.message_handler(commands=["goal"])
async def goal_cmd(message: types.Message):
    pool = await create_pool()
    goal = await get_goal(pool, str(message.from_user.id))
    await message.answer(f"–í–∞—à–∞ —Ü–µ–ª—å:\n{goal}" if goal else "–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞.")

# ‚úÖ /plan
@dp.message_handler(commands=["plan"])
async def plan_cmd(message: types.Message):
    pool = await create_pool()
    plan = await get_plan(pool, str(message.from_user.id))
    await message.answer(f"–í–∞—à –ø–ª–∞–Ω:\n{plan}" if plan else "–ü–ª–∞–Ω –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω.")

# ‚úÖ /progress
@dp.message_handler(commands=["progress"])
async def progress_cmd(message: types.Message):
    pool = await create_pool()
    progress = await get_progress(pool, message.from_user.id)
    total = progress["total"]
    completed = progress["completed"]
    points = progress["points"]
    percent = int((completed / total) * 100) if total > 0 else 0
    bar = "‚ñà" * (percent // 10) + "‚ñë" * (10 - percent // 10)
    await message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n{bar} {percent}%\n‚úÖ –≠—Ç–∞–ø—ã: {completed}/{total}\nüî• –ë–∞–ª–ª—ã: {points}")

# ‚úÖ /test_reminder
@dp.message_handler(commands=["test_reminder"])
async def test_reminder(message: types.Message):
    text = await generate_reminder_message()
    await message.answer(text)

# ‚úÖ Webhook –∑–∞–ø—É—Å–∫
async def on_startup(dp):
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    print("‚ùå Webhook —É–¥–∞–ª–µ–Ω")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )