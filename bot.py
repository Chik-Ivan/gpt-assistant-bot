# -*- coding: utf-8 -*-
import sys
import logging
import os
import re
import random
import datetime
import openai
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiohttp import web
from config import BOT_TOKEN, OPENAI_API_KEY
from keyboards import support_button
from database import (
    create_pool,
    upsert_user,
    update_goal_and_plan,
    get_goal_and_plan,
    check_access,
    create_progress_stage,
    check_last_progress,
    mark_progress_completed,
    create_next_stage,
    get_all_users,
    get_users_for_reminder
)

# üîó Webhook config for Render
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # https://your-service.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

sys.stdout.reconfigure(encoding="utf-8")

# üîç Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# ‚úÖ Init bot & dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ‚úÖ Register commands in Telegram
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"),
        BotCommand(command="goal", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞"),
        BotCommand(command="support", description="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"),
    ]
    await bot.set_my_commands(commands)

# üìå –•—Ä–∞–Ω–∏–ª–∏—â–∞
dialogues = {}
waiting_for_days = {}
waiting_for_completion = {}
pool = None

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç GPT (–ù–ï —Ç—Ä–æ–≥–∞–µ–º)
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
)

# ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–Ω–µ–π
def extract_days(text: str) -> int:
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

# ‚úÖ GPT-–æ—Ç–≤–µ—Ç
async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]

    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=dialogues[user_id],
            temperature=0.7
        )
        gpt_reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": gpt_reply})

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å –∏ –ø–ª–∞–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if "–¶–µ–ª—å:" in gpt_reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in gpt_reply:
            goal = gpt_reply.split("–¶–µ–ª—å:")[1].split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")[0].strip()
            plan = gpt_reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)

            # –î–µ–¥–ª–∞–π–Ω + –ø—Ä–æ–≥—Ä–µ—Å—Å
            today = datetime.datetime.now()
            deadline = today + datetime.timedelta(days=7)
            await create_progress_stage(pool, user_id, 1, deadline.strftime("%Y-%m-%d %H:%M:%S"))

        return gpt_reply

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {type(e).__name__}"

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    await upsert_user(pool, user_id, username, first_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    access = await check_access(pool, user_id)
    if not access:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    intro_text = "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π —Ç–∏–ø –∫–æ–Ω–¥–∏—Ç–µ—Ä–∞ –∏ –ø–æ–º–æ—á—å –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏."
    response = await chat_with_gpt(user_id, intro_text)
    await message.reply(response)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler()
async def handle_chat(message: Message):
    user_id = message.from_user.id
    text = message.text

    access = await check_access(pool, user_id)
    if not access:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=support_button)
        return

    if waiting_for_days.get(user_id):
        days = extract_days(text)
        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        await create_progress_stage(pool, user_id, 1, deadline.strftime("%Y-%m-%d %H:%M:%S"))
        await message.reply(f"–ü–ª–∞–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π ‚úÖ")
        waiting_for_days[user_id] = False
        return

    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
        else:
            await message.reply("üòî –ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∏–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
        del waiting_for_completion[user_id]
        return

    response = await chat_with_gpt(user_id, text)
    await message.reply(response)
    if any(w in response.lower() for w in ["–∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π", "—Å—Ä–æ–∫", "–≥—Ä–∞—Ñ–∏–∫"]):
        waiting_for_days[user_id] = True

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã goal/plan/check/support
@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¢–≤–æ—è —Ü–µ–ª—å:\n{goal}" if goal else "–¶–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω:\n{plan}" if plan else "–ü–ª–∞–Ω –µ—â—ë –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["check"])
async def check_progress_handler(message: Message):
    progress = await check_last_progress(pool, message.from_user.id)
    if not progress:
        await message.reply("–ù–µ—Ç –Ω–∞—á–∞—Ç–æ–≥–æ –ø–ª–∞–Ω–∞. –ó–∞–≤–µ—Ä—à–∏ –¥–∏–∞–ª–æ–≥ —Å GPT.")
        return
    if progress["completed"]:
        await message.reply("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return
    await message.reply(f"–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–∞–ø {progress['stage']}? –ù–∞–ø–∏—à–∏: –¥–∞ / –Ω–µ—Ç")
    waiting_for_completion[message.from_user.id] = progress["stage"]

@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=support_button)

# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ü–µ–ª–∏, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
    "üìÖ –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

async def generate_reminder():
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."}],
            max_tokens=50,
            temperature=0.8
        )
        return response["choices"][0]["message"]["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)

async def send_reminders():
    users = await get_all_users(pool)
    for user in users:
        try:
            text = await generate_reminder()
            await bot.send_message(user["user_id"], text)
        except BotBlocked:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def error_handler(update, exception):
    if isinstance(exception, TelegramAPIError):
        return True
    try:
        await update.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
    except:
        pass
    return True

# ‚úÖ Webhook —Å—Ç–∞—Ä—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour=18))  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 18:00
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    from aiogram.utils.executor import start_webhook
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )