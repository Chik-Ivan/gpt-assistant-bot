# -*- coding: utf-8 -*-
import sys
import logging
import openai
import os
import random
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config import BOT_TOKEN, OPENAI_API_KEY
from keyboards import support_button
from database import (
    create_pool,
    upsert_user,
    update_goal_and_plan,
    get_goal_and_plan,
    check_access,
    create_progress_stage,
    check_last_progress,
    mark_progress_completed,
    create_next_stage,
    get_active_users,
    get_users_for_reminder,
    get_progress,
)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook –∏ WebApp
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://gpt-assistant-bot-v.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

sys.stdout.reconfigure(encoding="utf-8")

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# ‚úÖ –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="goal", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–ª–∞–Ω"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="support", description="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
    ]
    await bot.set_my_commands(commands)

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
dialogues = {}
waiting_for_days = {}  # –ñ–¥—ë–º —Å—Ä–æ–∫
waiting_for_completion = {}  # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
pool = None

# ‚úÖ System Prompt
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É, –≤—ã—è–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á—ë—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n\n"
    "–î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
    "1. –í—ã—è—Å–Ω–∏, –∫—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π (–Ω–æ–≤–∏—á–æ–∫, –ø—Ä–æ—Ñ–∏, —É—á–µ–Ω–∏–∫ –∏ —Ç.–¥.)\n"
    "2. –£–∑–Ω–∞–π, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (–≤ –¥–µ–Ω—å–≥–∞—Ö, —É—Ä–æ–≤–Ω–µ, —Å—Ç–∞—Ç—É—Å–µ)\n"
    "3. –í—ã—è–≤–∏ –±–∞—Ä—å–µ—Ä—ã –∏ —Å—Ç—Ä–∞—Ö–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è\n"
    "4. –°–ø—Ä–æ—Å–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –æ–Ω –º–æ–∂–µ—Ç —É–¥–µ–ª—è—Ç—å\n"
    "5. –£—Ç–æ—á–Ω–∏ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–≤ –Ω–µ–¥–µ–ª—è—Ö –∏–ª–∏ –º–µ—Å—è—Ü–∞—Ö)\n\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n"
    "- –ß—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –¶–ï–õ–¨\n"
    "- –†–∞–∑–±–µ–π –ø—É—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª–∏\n"
    "- –í –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–π 3 –¥–µ–π—Å—Ç–≤–∏—è: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏\n\n"
    "–í–∞–∂–Ω–æ:\n"
    "- –ó–∞–¥–∞–≤–∞–π –ø–æ 1 –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑\n"
    "- –ù–µ —Å–ø–µ—à–∏, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
    "- –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∞ —Å–∫–∞–∂–∏: ¬´–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è¬ª\n\n"
    "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º: –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ—é —Ä–æ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å.\n"
    "**–ü–æ—Å–ª–µ —Å–ª–æ–≤ ‚Äú–ù–∞—á–Ω—ë–º?‚Äù –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.**\n\n"
    "–ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ. –ù–µ –æ—Ç–ø—É—Å–∫–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞."
)

# ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_days(text: str) -> int:
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""

# ‚úÖ GPT-–æ—Ç–≤–µ—Ç
async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(model="gpt-4o", messages=dialogues[user_id], temperature=0.7)
        gpt_reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": gpt_reply})

        if "–¶–µ–ª—å:" in gpt_reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in gpt_reply:
            goal = extract_between(gpt_reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = gpt_reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–∞–ø
            today = datetime.datetime.now()
            deadline = today + datetime.timedelta(days=7)
            await create_progress_stage(pool, user_id, stage=1, deadline=deadline.strftime("%Y-%m-%d %H:%M:%S"))

        return gpt_reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {type(e).__name__}"

# ‚úÖ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    await upsert_user(pool, user_id, message.from_user.username or "", message.from_user.first_name or "")

    if not await check_access(pool, user_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    first_prompt = "–ü–æ–º–æ–≥–∏ –º–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –¥–æ—Ö–æ–¥—É –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω."
    first_response = await chat_with_gpt(user_id, first_prompt)
    await message.reply(first_response)

# ‚úÖ –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler()
async def handle_chat(message: Message):
    user_id, text = message.from_user.id, message.text

    if not await check_access(pool, user_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    if waiting_for_days.get(user_id):
        days = extract_days(text)
        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        await create_progress_stage(pool, user_id, stage=1, deadline=deadline.strftime("%Y-%m-%d %H:%M:%S"))
        await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π ‚úÖ")
        waiting_for_days[user_id] = False
        return

    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ò–¥—ë–º –¥–∞–ª—å—à–µ!")
        else:
            await message.reply("–û–∫, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π ‚Äî —Ü–µ–ª—å –∂–¥—ë—Ç —Ç–µ–±—è! üí™")
        del waiting_for_completion[user_id]
        return

    response = await chat_with_gpt(user_id, text)
    await message.reply(response)

    if any(word in response.lower() for word in ["—Å—Ä–æ–∫", "–≥—Ä–∞—Ñ–∏–∫", "–∑–∞ —Å–∫–æ–ª—å–∫–æ"]):
        waiting_for_days[user_id] = True

# ‚úÖ /goal
@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¢–≤–æ—è —Ü–µ–ª—å:\n\n{goal}" if goal else "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ‚úÖ /plan
@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω:\n\n{plan}" if plan else "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ‚úÖ /progress
@dp.message_handler(commands=["progress"])
async def progress_handler(message: Message):
    data = await get_progress(pool, message.from_user.id)
    progress_text = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n‚úÖ {data['completed']} –∏–∑ {data['total']} —ç—Ç–∞–ø–æ–≤\nüî• –ë–∞–ª–ª—ã: {data['points']}\n"
    )
    if data["next_deadline"]:
        progress_text += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {data['next_deadline'].strftime('%d.%m')}\n"
    await message.reply(progress_text)

# ‚úÖ /support
@dp.message_handler(commands=["support"])
async def support_handler(message: Message):
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=support_button)

# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω!",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ü–µ–ª—å!",
    "üìÖ –ö–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å?",
    "üî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!"
]

async def send_reminders():
    users = await get_active_users(pool)
    for user in users:
        try:
            await bot.send_message(user["telegram_id"], random.choice(REMINDER_TEXTS))
        except BotBlocked:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['telegram_id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

# ‚úÖ Webhook lifecycle
async def on_startup_webhook(dp):
    global pool
    pool = await create_pool()
    await bot.set_webhook(WEBHOOK_URL)
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour=18))
    scheduler.start()
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown_webhook(dp):
    logging.warning("–£–¥–∞–ª–µ–Ω–∏–µ webhook...")
    await bot.delete_webhook()
    await bot.session.close()

# ‚úÖ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup_webhook,
        on_shutdown=on_shutdown_webhook,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )