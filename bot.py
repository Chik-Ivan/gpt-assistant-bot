# -*- coding: utf-8 -*-
import sys
import logging
import openai
import os
import random
import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import Message, BotCommand
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π
from config import BOT_TOKEN, OPENAI_API_KEY
from keyboards import support_button
from database import (
    create_pool,
    upsert_user,
    update_goal_and_plan,
    get_goal_and_plan,
    check_access,
    create_progress_stage,
    check_last_progress,
    mark_progress_completed,
    create_next_stage,
    get_progress,
    get_all_users,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
sys.stdout.reconfigure(encoding="utf-8")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ GPT
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="goal", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ü–µ–ª—å"),
        BotCommand(command="plan", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–ª–∞–Ω"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        BotCommand(command="progress", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="support", description="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"),
    ]
    await bot.set_my_commands(commands)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
dialogues = {}
waiting_for_days = {}
waiting_for_completion = {}
pool = None

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º—Ç –¥–ª—è GPT
system_prompt = (
    "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω–¥–∏—Ç–µ—Ä–∞. –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å, –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω.\n"
    "–°–æ–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ: –æ–ø—ã—Ç, —Ü–µ–ª—å, –±–∞—Ä—å–µ—Ä—ã, –≤—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ, —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
    "–ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –¶–ï–õ–¨ –∏ –ü–õ–ê–ù (—Ä–∞–∑–±–µ–π –Ω–∞ –Ω–µ–¥–µ–ª–∏: –ö–æ–Ω—Ç–µ–Ω—Ç, –ü—Ä–æ–¥—É–∫—Ç, –ü—Ä–æ–¥–∞–∂–∏).\n"
    "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É. –ù–∞—á–Ω–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Ñ—Ä–∞–∑—ã ¬´–ù–∞—á–Ω—ë–º?¬ª"
)

# ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –¥–Ω–µ–π
import re
def extract_days(text: str) -> int:
    numbers = re.findall(r"\d+", text)
    return int(numbers[0]) if numbers else 7

def extract_between(text, start, end):
    try:
        return text.split(start)[1].split(end)[0]
    except IndexError:
        return ""

# ‚úÖ GPT-–æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def chat_with_gpt(user_id: int, user_input: str) -> str:
    if user_id not in dialogues:
        dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    dialogues[user_id].append({"role": "user", "content": user_input})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=dialogues[user_id],
            temperature=0.7
        )
        gpt_reply = response["choices"][0]["message"]["content"]
        dialogues[user_id].append({"role": "assistant", "content": gpt_reply})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –∏ –ø–ª–∞–Ω
        if "–¶–µ–ª—å:" in gpt_reply and "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π" in gpt_reply:
            goal = extract_between(gpt_reply, "–¶–µ–ª—å:", "–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π").strip()
            plan = gpt_reply.split("–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:")[-1].strip()
            await update_goal_and_plan(pool, user_id, goal, plan)

            # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é
            deadline = datetime.datetime.now() + datetime.timedelta(days=7)
            await create_progress_stage(pool, user_id, stage=1, deadline=deadline.strftime("%Y-%m-%d %H:%M:%S"))

        return gpt_reply
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ GPT: {type(e).__name__}"

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    await upsert_user(pool, user_id, username, first_name)

    access = await check_access(pool, user_id)
    if not access:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    dialogues[user_id] = [{"role": "system", "content": system_prompt}]
    first_response = await chat_with_gpt(user_id, "–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥")
    await message.reply(first_response)

# ‚úÖ –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_chat(message: Message):
    user_id = message.from_user.id
    text = message.text

    access = await check_access(pool, user_id)
    if not access:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return

    if waiting_for_days.get(user_id):
        days = extract_days(text)
        deadline = datetime.datetime.now() + datetime.timedelta(days=days)
        await create_progress_stage(pool, user_id, stage=1, deadline=deadline.strftime("%Y-%m-%d %H:%M:%S"))
        await message.reply(f"‚úÖ –ü–ª–∞–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        waiting_for_days[user_id] = False
        return

    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        else:
            await message.reply("–ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —É—Å–ø–µ—Ç—å!")
        del waiting_for_completion[user_id]
        return

    response = await chat_with_gpt(user_id, text)
    await message.reply(response)

    if any(word in response.lower() for word in ["—Å—Ä–æ–∫", "–≥—Ä–∞—Ñ–∏–∫", "–¥–µ–¥–ª–∞–π–Ω"]):
        waiting_for_days[user_id] = True

# ‚úÖ /goal
@dp.message_handler(commands=["goal"])
async def goal_handler(message: Message):
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üéØ –¶–µ–ª—å:\n{goal}" if goal else "–¶–µ–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# ‚úÖ /plan
@dp.message_handler(commands=["plan"])
async def plan_handler(message: Message):
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.reply(f"üìÖ –ü–ª–∞–Ω:\n{plan}" if plan else "–ü–ª–∞–Ω –µ—â—ë –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

# ‚úÖ /progress
@dp.message_handler(commands=["progress"])
async def progress_handler(message: Message):
    user_id = message.from_user.id
    data = await get_progress(pool, user_id)
    progress_text = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['completed']} –∏–∑ {data['total']} —ç—Ç–∞–ø–æ–≤\n"
        f"üî• –ë–∞–ª–ª—ã: {data['points']}\n"
    )
    if data["next_deadline"]:
        progress_text += f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {data['next_deadline'].strftime('%d %B')}\n"
    await message.reply(progress_text)

# ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω!",
    "üî• –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ü–µ–ª–∏!",
    "üìÖ –ö–∞–∫ –∏–¥—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å?"
]

async def send_reminders():
    try:
        users = await get_all_users(pool)
        for user in users:
            text = random.choice(REMINDER_TEXTS)
            await bot.send_message(user["telegram_id"], text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# ‚úÖ ON STARTUP
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour=18))
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# ‚úÖ ON SHUTDOWN
async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.session.close()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω.")

# ‚úÖ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )