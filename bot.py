# -*- coding: utf-8 -*-
import sys
import logging
import openai
import os
import random
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand
from aiogram.utils.executor import start_webhook
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import BOT_TOKEN, OPENAI_API_KEY, WEBHOOK_HOST
from database import (
    create_pool, upsert_user, check_access, update_goal_and_plan, get_goal_and_plan,
    create_progress_stage, mark_progress_completed, create_next_stage, check_last_progress,
    get_progress, get_users_for_reminder
)
from keyboards import support_button

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

waiting_for_days = dict()
waiting_for_completion = dict()

async def set_commands(bot):
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="/goal", description="–ú–æ—è —Ü–µ–ª—å"),
        BotCommand(command="/plan", description="–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π"),
        BotCommand(command="/check", description="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="/progress", description="–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –±–∞–ª–ª—ã"),
        BotCommand(command="/support", description="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        BotCommand(command="/test_reminder", description="–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
    ]
    await bot.set_my_commands(commands)

async def chat_with_gpt(user_id, text):
    try:
        openai.api_key = OPENAI_API_KEY
        messages = [{"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –∏ –ø–ª–∞–Ω."}]
        messages.append({"role": "user", "content": text})
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=messages, max_tokens=200)
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.error(f"GPT –æ—à–∏–±–∫–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    global pool
    user_id = message.from_user.id
    await upsert_user(pool, user_id, message.from_user.username, message.from_user.first_name)
    access = await check_access(pool, user_id)
    if not access:
        await message.answer("üîí –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=support_button)
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å.")

@dp.message_handler(commands=["goal"])
async def cmd_goal(message: Message):
    global pool
    goal, _ = await get_goal_and_plan(pool, message.from_user.id)
    await message.answer(f"üéØ –¶–µ–ª—å: {goal}" if goal else "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.message_handler(commands=["plan"])
async def cmd_plan(message: Message):
    global pool
    _, plan = await get_goal_and_plan(pool, message.from_user.id)
    await message.answer(f"üìù –ü–ª–∞–Ω: {plan}" if plan else "–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message_handler(commands=["check"])
async def cmd_check(message: Message):
    global pool
    user_id = message.from_user.id
    last = await check_last_progress(pool, user_id)
    if last and not last["completed"]:
        stage = last["stage"]
        waiting_for_completion[user_id] = stage
        await message.answer(f"–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–∞–ø {stage}? (–¥–∞/–Ω–µ—Ç)")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")

@dp.message_handler(commands=["progress"])
async def cmd_progress(message: Message):
    global pool
    user_id = message.from_user.id
    stats = await get_progress(pool, user_id)
    await message.answer(
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —ç—Ç–∞–ø–æ–≤: {stats['completed']} / {stats['total']}"

        f"‚≠ê –ë–∞–ª–ª—ã: {stats['points']}"

        f"‚è≥ –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–¥–ª–∞–π–Ω: {stats['next_deadline'] or '–ù–µ—Ç'}"
    )

@dp.message_handler(commands=["support"])
async def cmd_support(message: Message):
    await message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º:", reply_markup=support_button)

@dp.message_handler()
async def handle_user_input(message: Message):
    global pool
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in waiting_for_days:
        try:
            days = int("".join(filter(str.isdigit, text)))
            deadline = datetime.datetime.now() + datetime.timedelta(days=days)
            await create_progress_stage(pool, user_id, 1, deadline.strftime("%Y-%m-%d %H:%M:%S"))
            await message.reply(f"‚úÖ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.")
        except:
            await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14).")
        waiting_for_days.pop(user_id, None)
        return

    if user_id in waiting_for_completion:
        if "–¥–∞" in text.lower():
            await mark_progress_completed(pool, user_id, waiting_for_completion[user_id])
            await create_next_stage(pool, user_id, waiting_for_completion[user_id] + 1)
            await message.reply("üî• –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!")
        else:
            await message.reply("–ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç–∞—Ä–∞—Ç—å—Å—è!")
        waiting_for_completion.pop(user_id, None)
        return

    response = await chat_with_gpt(user_id, text)
    await message.reply(response)
    if any(word in response.lower() for word in ["—Å—Ä–æ–∫", "–¥–µ–¥–ª–∞–π–Ω", "–¥–Ω–µ–π"]):
        waiting_for_days[user_id] = True

REMINDER_TEXTS = [
    "‚è∞ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–ª–∞–Ω! –î–µ–ª–∞–µ—à—å —É—Å–ø–µ—Ö–∏?",
    "üîî –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ–∏ —Ü–µ–ª–∏!",
    "üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
    "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–æ —Ü–µ–ª–∏ —Å–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è!"
]

async def generate_reminder_message():
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                { "role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä." },
                { "role": "user", "content": "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)." }
            ],
            max_tokens=50, temperature=0.8
        )
        return resp["choices"][0]["message"]["content"].strip()
    except:
        return random.choice(REMINDER_TEXTS)

async def send_reminders():
    try:
        users = await get_users_for_reminder(pool)
        for user in users:
            if random.random() < 0.4:
                text = await generate_reminder_message() if random.random() > 0.5 else random.choice(REMINDER_TEXTS)
                await bot.send_message(user["user_id"], text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

@dp.message_handler(commands=["test_reminder"])
async def test_reminder(message: Message):
    await send_reminders()
    await message.reply("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

async def on_startup(dp):
    global pool
    pool = await create_pool()
    await set_commands(bot)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminders, CronTrigger(hour="10,18"))
    scheduler.start()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.session.close()
    logging.warning("Webhook —É–¥–∞–ª—ë–Ω.")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )