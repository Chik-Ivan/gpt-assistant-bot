import asyncpg
import os
import logging

DATABASE_URL = os.getenv("DATABASE_URL")

# üîå –°–æ–∑–¥–∞—ë—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_pool():
    try:
        pool = await asyncpg.create_pool(DATABASE_URL, ssl='require')
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        return pool
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")

# üë§ –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def upsert_user(pool, user_id, username, first_name):
    try:
        async with pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO users (user_id, username, first_name, access)
                VALUES ($1, $2, $3, FALSE)
                ON CONFLICT (user_id)
                DO UPDATE SET username = EXCLUDED.username, first_name = EXCLUDED.first_name
            """, user_id, username, first_name)
    except Exception as e:
        logging.error(f"‚ùå upsert_user: {e}")

# üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_access(pool, user_id):
    try:
        async with pool.acquire() as conn:
            row = await conn.fetchrow("SELECT access FROM users WHERE user_id = $1", user_id)
            return row and row["access"]
    except Exception as e:
        logging.error(f"‚ùå check_access: {e}")
        return False

# üìù –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª—å –∏ –ø–ª–∞–Ω
async def update_goal_and_plan(pool, user_id, goal, plan):
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET goal = $1, plan = $2 WHERE user_id = $3",
                goal, plan, user_id
            )
    except Exception as e:
        logging.error(f"‚ùå update_goal_and_plan: {e}")

# üì• –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª—å –∏ –ø–ª–∞–Ω
async def get_goal_and_plan(pool, user_id):
    try:
        async with pool.acquire() as conn:
            row = await conn.fetchrow("SELECT goal, plan FROM users WHERE user_id = $1", user_id)
            return row["goal"], row["plan"] if row else (None, None)
    except Exception as e:
        logging.error(f"‚ùå get_goal_and_plan: {e}")
        return None, None

# ‚ûï –°–æ–∑–¥–∞—ë—Ç —ç—Ç–∞–ø –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def create_progress_stage(pool, user_id, stage, deadline):
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO progress (user_id, stage, completed, deadline) VALUES ($1, $2, FALSE, $3)",
                user_id, stage, deadline
            )
    except Exception as e:
        logging.error(f"‚ùå create_progress_stage: {e}")

# ‚úÖ –û—Ç–º–µ—á–∞–µ—Ç —ç—Ç–∞–ø –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
async def mark_progress_completed(pool, user_id, stage):
    try:
        async with pool.acquire() as conn:
            await conn.execute(
                "UPDATE progress SET completed = TRUE WHERE user_id = $1 AND stage = $2",
                user_id, stage
            )
    except Exception as e:
        logging.error(f"‚ùå mark_progress_completed: {e}")

# üîÑ –°–æ–∑–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
async def create_next_stage(pool, user_id, stage, deadline):
    return await create_progress_stage(pool, user_id, stage, deadline)

# üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —ç—Ç–∞–ø
async def check_last_progress(pool, user_id):
    try:
        async with pool.acquire() as conn:
            row = await conn.fetchrow(
                "SELECT stage, completed, deadline FROM progress WHERE user_id = $1 ORDER BY stage DESC LIMIT 1",
                user_id
            )
            return row
    except Exception as e:
        logging.error(f"‚ùå check_last_progress: {e}")
        return None

# üìä –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def get_progress(pool, user_id):
    try:
        async with pool.acquire() as conn:
            return await conn.fetch(
                "SELECT stage, completed, deadline FROM progress WHERE user_id = $1 ORDER BY stage",
                user_id
            )
    except Exception as e:
        logging.error(f"‚ùå get_progress: {e}")
        return []

# üîî –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def get_users_for_reminder(pool):
    try:
        async with pool.acquire() as conn:
            return await conn.fetch("SELECT DISTINCT user_id FROM progress WHERE completed = FALSE")
    except Exception as e:
        logging.error(f"‚ùå get_users_for_reminder: {e}")
        return []