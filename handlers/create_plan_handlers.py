import logging
import json
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.chat_action import ChatActionSender
from keyboards.all_inline_keyboards import get_continue_create_kb, stop_question_kb
from keyboards.all_text_keyboards import get_main_keyboard
from database.core import db
from database.models import UserTask
from gpt import gpt, hello_prompt, create_question_prompt, check_answer_prompt, create_plan_prompt
from create_bot import bot
from handlers.current_plan_handler import AskQuestion
from utils.all_utils import extract_date_from_string


class Plan(StatesGroup):
    confirmation_of_start = State()
    find_level = State()
    find_goal = State()
    goal_clarification = State()
    find_strengths = State()
    find_favorite_skills = State()
    about_promotion_and_channel = State()
    find_fear = State()
    find_time_in_week = State()
    find_time_for_goal = State()


create_plan_router = Router()


async def gpt_step(message: Message, state: FSMContext, 
                   add_to_prompt: str, next_state: State, 
                   add_to_answer_check: str = "", need_answer_options: bool = False,
                   question_number: int = 0):
    async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
        await message.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–æ–ø—Ä–æ—Å:)")
        db_repo = await db.get_repository()
        user = await db_repo.get_user(message.from_user.id)
        prompt = check_answer_prompt + f"{user.messages}\n\n —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç \"{message.text}\"\n–Ω–∞ –≤–æ–ø—Ä–æ—Å\n\"{user.messages[-1]}\" \n\n{add_to_answer_check}"
        reply = gpt.chat_for_plan(prompt) 
        reply = json.loads(reply)
        match int(reply["status"]):
            case 0:
                user.messages.append({"role": "user", "content": message.text})
                prompt = create_question_prompt + f"{user.messages}\n\n {add_to_prompt}"
                reply_question = gpt.chat_for_plan(prompt)
                reply_question = json.loads(reply_question)
                if reply_question["question_text"] and (reply_question["answer_options"] or not need_answer_options) and reply["reply"]:
                    question_text = (f"–û—Ç–º–µ—á–∞—é: <b>{message.text}</b>\n\n"
                                    f"üìå <i>–ú–∏–Ω–∏-–∏—Ç–æ–≥</i>: {reply['reply']}\n\n"
                                    f"-----\n\n"
                                    f"<b>–í–æ–ø—Ä–æ—Å {question_number}</b>\n"
                                    f"{reply_question['question_text']}")
                    if need_answer_options:
                        question_text += "\n"
                        for key, value in reply_question["answer_options"].items():
                            question_text += f"‚Ä¢ {key}) {value}\n"
                    await message.answer(question_text)
                    await state.set_state(next_state)
                    user.messages.append({"role": "assistant", "content": question_text})
                    await db_repo.update_user(user)
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
            case 1:
                if reply["reply"]:
                    await message.answer(reply["reply"])
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
            case 2:
                if reply["reply"]:
                    await message.answer(reply["reply"], reply_markup=stop_question_kb())
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")


async def check_state(message: Message, state: FSMContext):
    cur_state = await state.get_state()

    logging.info(f"CUR_STATE: {cur_state}")

    if cur_state is not None and cur_state != AskQuestion.ask_question:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –ø—ã—Ç–∞—é—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞, " 
                            "–≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                             reply_markup=get_continue_create_kb())
        return None
    elif cur_state == AskQuestion.ask_question:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Å–µ–π—á–∞—Å –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞, —Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ?", reply_markup=stop_question_kb())
        return None
    return True


@create_plan_router.callback_query(F.data == "delete_data")
async def delete_dialog(call: CallbackQuery, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
    await state.clear()
    await call.answer()
    
    try:
        db_repo = await db.get_repository()
        user = await db_repo.get_user(call.from_user.id)
        user.messages = None
        user.stages_plan = None
        user.substages_plan = None
        user.goal = None
        await db_repo.update_user(user)
        user_task = await db_repo.get_user_task(call.from_user.id)
        if user_task:
            user_task.current_step = 0
            user_task.deadlines = None
            user_task.current_deadline = None
            await db_repo.update_user_task(user_task)
        await call.message.answer("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


@create_plan_router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω")
async def start_create_plan(message: Message, state: FSMContext):
    check = await check_state(message, state)
    if not check:
        return
    db_repo = await db.get_repository()
    async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
        user = await db_repo.get_user(message.from_user.id)

        if user is None:
            logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞")
            await message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω, id: {user.id}")


        if user.goal:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ–º.", 
                                 reply_markup=get_continue_create_kb())
            return
        
        if user.messages:
            await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, " 
                                "–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ, –≤–∞–º –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ–º.",
                                reply_markup=get_continue_create_kb())
            return
    
        
        reply = gpt.chat_for_plan(hello_prompt)
        reply = json.loads(reply)
        main_keyboard = await get_main_keyboard(message.from_user.id)
        if not reply:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                 reply_markup=main_keyboard)
            return
        if reply["hello_message"]:
            await message.answer(reply["hello_message"], reply_markup=main_keyboard)
            await state.set_state(Plan.confirmation_of_start)
            user.messages = [{"role": "assistant", "content": reply["hello_message"]}]
            await db_repo.update_user(user)
            return
        logging.info(f"–ö—Ä–∏–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n {reply}")
        await message.answer(f"–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=main_keyboard)


@create_plan_router.message(Plan.confirmation_of_start)
async def confirmation_of_start(message: Message, state: FSMContext):
    logging.info("Start confirmation_of_start")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –æ–Ω? –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–∏—á–æ–∫ –∏–ª–∏ –ª—é–±–∏—Ç–µ–ª—å)"
        await gpt_step(message, state, add_text, Plan.find_level, need_answer_options=True, question_number=1)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ confirmation_of_start")


@create_plan_router.message(Plan.find_level)
async def find_level(message: Message, state: FSMContext):
    logging.info("Start find_level")
    try:
        add_text_for_check_answer = "–≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å \"–õ—é–±–∏—Ç–µ–ª—å, –ø—Ä–æ—Ñ–∏, –Ω–æ–≤–∏—á–æ–∫\", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ —Å–≤–æ–µ —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä —É—á—É—Å—å –∏–ª–∏ –ø—Ä–æ—Ö–æ–∂—É –∫—É—Ä—Å—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏–º, –∏–ª–∏ —É–º–µ—é –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ —Ç–æ—Ä—Ç—ã"
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ —Ç–æ–º, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –º–µ–ª–∫–æ–µ. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª–∞ —Ü–µ–ª—å —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—Ç–≤–æ–º)\n–°–∞–º–∏ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—â–∏–º–∏, —É—Ç–æ—á–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ"
        await gpt_step(message, state, add_text, Plan.find_goal, add_text_for_check_answer, True, 2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_level")


@create_plan_router.message(Plan.find_goal)
async def find_goal(message: Message, state: FSMContext):
    logging.info("Start find_goal")
    try:
        add_text_for_answer_check = "–¶–µ–ª—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —á—Ç–æ-—Ç–æ –º–µ–ª–∫–æ–µ, –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—Ç–≤–æ–º"
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥, —Ç–æ –∫–∞–∫—É—é —Å—É–º–º—É. –ï—Å–ª–∏ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–º, —Ç–æ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –∏ —Ç.–ø.)\n–í–ê–ñ–ù–û, –ß–¢–û –ü–†–ï–î–õ–û–ñ–ê–ù–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –î–û–õ–ñ–ù–´ –û–¢–í–ï–¢–ê –î–û–õ–ñ–ù–´ –ü–†–û–î–û–õ–ñ–ê–¢–¨ –ò–ó–ù–ê–ß–ê–õ–¨–ù–û –í–´–ë–†–ê–ù–ù–£–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –¶–ï–õ–¨!!"
        await gpt_step(message, state, add_text, Plan.goal_clarification, add_text_for_answer_check, True, 3)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_goal")


@create_plan_router.message(Plan.goal_clarification)
async def goal_clarification(message: Message, state: FSMContext):
    logging.info("Start goal_clarification")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—á—å –Ω–µ –æ –Ω–∞–≤—ã–∫–∞—Ö –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—Ç–≤–∞, –∞ –≤ —Ü–µ–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å). –£—Ç–æ—á–Ω–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ"
        await gpt_step(message, state, add_text, Plan.find_strengths, need_answer_options=True, question_number=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ goal_clarification")


@create_plan_router.message(Plan.find_strengths)
async def find_strengths(message: Message, state: FSMContext):
    logging.info("Start find_strengths")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—Ç–≤–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–∫—Ä–∞—à–µ–Ω–∏–µ–º —Ç–æ—Ä—Ç–æ–≤ –∏–ª–∏ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —É–∑–æ—Ä—ã –∏—Ö —à–æ–∫–æ–ª–∞–¥–∞)"
        await gpt_step(message, state, add_text, Plan.find_favorite_skills, need_answer_options=True, question_number=5)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_strengths")


@create_plan_router.message(Plan.find_favorite_skills)
async def find_favorite_skills(message: Message, state: FSMContext):
    logging.info("Start find_favorite_skills")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–≤–æ–π –∫–∞–Ω–∞–ª, –±–æ–ª—å—à–æ–π –ª–∏ –æ–Ω, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)"
        await gpt_step(message, state, add_text, Plan.about_promotion_and_channel, need_answer_options=True, question_number=6)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_favorite_skills")


@create_plan_router.message(Plan.about_promotion_and_channel)
async def about_promotion_and_channel(message: Message, state: FSMContext):
    logging.info("Start about_promotion_and_channel")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä–∞—Ö–∞—Ö –∏–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–µ—à–∞—Ç—å –µ–º—É –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏"
        await gpt_step(message, state, add_text, Plan.find_fear, need_answer_options=True, question_number=7)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ about_promotion_and_channel")


@create_plan_router.message(Plan.find_fear)
async def find_fear(message: Message, state: FSMContext):
    logging.info("start find_fear")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤ –¥–µ–Ω—å –æ–Ω –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–π —Ü–µ–ª–∏ (–≤ —á–∞—Å–∞—Ö)"
        await gpt_step(message, state, add_text, Plan.find_time_in_week, question_number=8)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_fear")


@create_plan_router.message(Plan.find_time_in_week)
async def find_time_in_week(message: Message, state: FSMContext):
    logging.info("start find_time_in_week")
    try:
        add_text_to_answer_check = "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏, —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–π —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç"
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∑–∞ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –Ω–µ–¥–µ–ª—å –∏–ª–∏ –º–µ—Å—è—Ü–µ–≤)"
        await gpt_step(message, state, add_text, Plan.find_time_for_goal, add_text_to_answer_check, question_number=9)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ {e}, –≤ find_time_in_week")

    
@create_plan_router.message(Plan.find_time_for_goal)
async def find_time_for_goal(message: Message, state: FSMContext):
    logging.info("start find_time_for_goal")
    try:
        db_repo = await db.get_repository()
        user = await db_repo.get_user(message.from_user.id)
        prompt = check_answer_prompt + f"{user.messages}\n\n —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç \"{message.text}\"\n–Ω–∞ –≤–æ–ø—Ä–æ—Å\n\"{user.messages[-1]}\""
        reply = gpt.chat_for_plan(prompt) 
        reply = json.loads(reply)
        match int(reply["status"]):
            case 0:
                await message.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è —Å–æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω..")
                user.messages.append({"role": "user", "content": message.text})
                prompt = create_plan_prompt + f"{user.messages}\n\n –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ {datetime.now().strftime('%d.%m.%Y')}"
                reply = gpt.chat_for_plan(prompt)
                reply = json.loads(reply)
                if reply["goal"] and reply["plan"] and reply["warp"] and reply["motivation"]:
                    stages, substages = reply["plan"], reply["substage"]
                    text = ("–•–æ—Ä–æ—à–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
                            "–í–æ—Ç —Ç–≤–æ–π –ø–ª–∞–Ω –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏! \n–ê —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"‚ùó –ó–∞–¥–∞–Ω–∏—è —ç—Ç–∞–ø–∞ \", "
                            "—Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—ç—Ç–∞–ø—ã –ø–ª–∞–Ω–∞ –ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏\n\n-----\n\n"
                            f"<b>1. –¢–≤–æ—è –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å:</b>\n\n{reply['goal']}\n\n-----\n\n"
                            f"<b>2. –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞:</b>\n\n{reply['warp']}\n\n----\n\n"
                            f"<b>3. –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ —Å—Ä–æ–∫–∏:</b>\n\n")
                    user.stages_plan = stages
                    user.substages_plan = substages
                    user.goal = reply["goal"]
                    await db_repo.update_user(user)
                    
                    deadlines = []
                    for i, (stage_key, stage_value) in enumerate(stages.items(), start=1):
                        stage_num = str(i)
                        if stage_num in substages:
                            for sub in substages[stage_num].values():
                                date = extract_date_from_string(sub)
                                deadlines.append(date)
                        else:
                            date = extract_date_from_string(stage_value)
                            deadlines.append(date)
                    user_task = await db_repo.get_user_task(user.id)
                    if user_task:
                        user_task.deadlines = deadlines
                        user_task.current_deadline = deadlines[0] if deadlines else None
                        user_task.current_step = 0
                        await db_repo.update_user_task(user_task)
                    else:
                        user_task = UserTask(
                            id=user.id,
                            current_step=0,
                            deadlines=deadlines,
                            current_deadline=deadlines[0]
                        )
                        await db_repo.create_user_task(user_task)
                    for i, (stage_key, stage_value) in enumerate(user.stages_plan.items(), start=1):
                        stage_num = str(i)
                        text += (f"<b>{stage_key}</b> - {stage_value}\n\n")
                        if stage_num in user.substages_plan:
                            text += ("<b>–®–∞–≥–∏ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞:</b>\n\n")
                            for sub_name, sub_value in user.substages_plan[stage_num].items():
                                text += (f"      {sub_name} - {sub_value}\n\n")
                    text += reply["motivation"]
                    await message.answer(text)
                    await state.clear()
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
            case 1:
                if reply["reply"]:
                    await message.answer(reply["reply"])
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
            case 2:
                if reply["reply"]:
                    await message.answer(reply["reply"], reply_markup=stop_question_kb())
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ {e}, –≤ find_time_for_goal")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
