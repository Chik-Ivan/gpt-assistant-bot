import logging
import re
import json
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.chat_action import ChatActionSender
from keyboards.all_inline_keyboards import get_continue_create_kb, stop_question_kb
from keyboards.all_text_keyboards import get_main_keyboard
from database.core import db
from database.models import UserTask
from gpt import gpt, hello_prompt, create_question_prompt, check_answer_prompt, create_plan_prompt
from utils.all_utils import extract_between, extract_days, parse_plan
from create_bot import bot
from handlers.current_plan_handler import AskQuestion


class Plan(StatesGroup):
    confirmation_of_start = State()
    find_level = State()
    find_goal = State()
    find_fear = State()
    find_time_in_week = State()
    find_time_for_target = State()
    let_goal_and_plan = State()


create_plan_router = Router()


async def gpt_step(message: Message, state: FSMContext, add_to_prompt: str, next_state: State):
    db_repo = await db.get_repository()
    user = await db_repo.get_user(message.from_user.id)
    prompt = check_answer_prompt + f"{user.messages}\n\n —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç \"{message.text}\"\n–Ω–∞ –≤–æ–ø—Ä–æ—Å\n\"{user.messages[-1]}\""
    reply = gpt.chat_for_plan(prompt) 
    reply = json.loads(reply)
    match int(reply["status"]):
        case 0:
            user.messages.append({"role": "user", "content": message.text})
            prompt = create_question_prompt + f"{user.messages}\n\n {add_to_prompt}"
            reply = gpt.chat_for_plan(prompt)
            reply = json.loads(reply)
            if reply["question_text"]:
                await message.answer(reply["question_text"])
                await state.set_state(next_state)
                user.messages.append({"role": "assistant", "content": reply["question_text"]})
                await db_repo.update_user(user)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
        case 1:
            if reply["reply"]:
                await message.answer(reply["reply"])
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")
        case 2:
            if reply["reply"]:
                await message.answer(reply["reply"], reply_markup=stop_question_kb())
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–û—Ç–≤–µ—Ç –≥–ø—Ç: {reply}")


async def check_state(message: Message, state: FSMContext):
    cur_state = await state.get_state()

    logging.info(f"CUR_STATE: {cur_state}")

    if cur_state is not None and cur_state != AskQuestion.ask_question:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –ø—ã—Ç–∞—é—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞, " 
                            "–≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                             reply_markup=get_continue_create_kb())
        return None
    elif cur_state == AskQuestion.ask_question:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Å–µ–π—á–∞—Å –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é, —Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ?", reply_markup=stop_question_kb())
        return None
    return True


@create_plan_router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω")
async def start_create_plan(message: Message, state: FSMContext):
    check = await check_state(message, state)
    if not check:
        return
    db_repo = await db.get_repository()
    async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
        user = await db_repo.get_user(message.from_user.id)

        if user is None:
            logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞")
            await message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω, id: {user.id}")


        if user.goal:
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–∏–¥–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ–º —Å—Ç–∞—Ä—ã–π.", 
                                 reply_markup=get_continue_create_kb())
            return
        
        if user.messages:
            await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, " 
                                "–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ, –≤–∞–º –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ–º.",
                                reply_markup=get_continue_create_kb())
            return
    
        
        reply = gpt.chat_for_plan(hello_prompt)
        reply = json.loads(reply)
        if reply["hello_message"]:
            await message.answer(reply["hello_message"], reply_markup=get_main_keyboard(message.from_user.id))
            await state.set_state(Plan.confirmation_of_start)
            user.messages = [{"role": "assistant", "content": reply["hello_message"]}]
            await db_repo.update_user(user)
            return
        logging.info(f"–û—Ç–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n {reply}")
        await message.answer(f"–ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=get_main_keyboard())



@create_plan_router.callback_query(F.data == "delete_data")
async def delete_dialog(call: CallbackQuery, state: FSMContext):
    logging.info("–•–µ–Ω–¥–ª–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
    await state.clear()
    await call.answer()
    
    try:
        db_repo = await db.get_repository()
        user = await db_repo.get_user(call.from_user.id)
        user.messages = None
        user.plan = None
        user.goal = None
        await db_repo.update_user(user)
        user_task = await db_repo.get_user_task(call.from_user.id)
        if user_task:
            user_task.current_step = 0
            user_task.deadlines = None
            await db_repo.update_user_task(user_task)
        await call.message.answer("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


@create_plan_router.message(Plan.confirmation_of_start)
async def confirmation_of_start(message: Message, state: FSMContext):
    logging.info("Start confirmation_of_start")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ç–æ –æ–Ω? –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–∏—á–æ–∫ –∏–ª–∏ –ª—é–±–∏—Ç–µ–ª—å)"
        await gpt_step(message, state, add_text, Plan.find_level)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ confirmation_of_start")


@create_plan_router.message(Plan.find_level)
async def find_level(message: Message, state: FSMContext):
    logging.info("Start find_level")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ —Ç–æ–º, —á–µ–≥–æ –æ–Ω —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞)"
        await gpt_step(message, state, add_text, Plan.find_goal)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_level")


@create_plan_router.message(Plan.find_goal)
async def find_goal(message: Message, state: FSMContext):
    logging.info("Start find_goal")
    try:
        add_text = "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ —Å—Ç—Ä–∞—Ö–∞—Ö –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –µ–≥–æ —Ü–µ–ª–∏"
        await gpt_step(message, state, add_text, Plan.find_fear)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}, –≤ find_goal")


# @create_plan_router.message(Plan.questions)
# async def questions_handler(message: Message, state: FSMContext):
#     data = await state.get_data()
#     current_q = data.get("current_question", 0)
#     logging.info(f"CURRENT_Q: {current_q}")

#     db_repo = await db.get_repository()
#     async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
#         user = await db_repo.get_user(message.from_user.id)

#         if user is None:
#             logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã."
#                         f"–í–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä : {current_q}; id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : {message.from_user.id}")
#             await message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
#             return

#         dialog, reply, status_code = await gpt.chat_for_plan(user.messages, 
#                                                              message.text)    

#         await message.answer(reply)

#     match status_code:
#         case 0:
#             user.messages = dialog
#             await db_repo.update_user(user)
#             if current_q == 4: # –¥–æ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –µ—â–µ 4
#                 await state.set_state(Plan.let_goal_and_plan)
#             data["current_question"] = current_q + 1
#             await state.set_data(data)
#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 0 –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")
#         case 1:
#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 1 –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")
#             pass
#         case 2:
#             await state.clear()
#             user.messages = None
#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 2 –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")
#             await message.answer("–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–∞—á—É –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞.\n"
#                                  "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞.")
#             await db_repo.update_user(user)


# @create_plan_router.message(Plan.let_goal_and_plan)
# async def let_goal_and_plan(message: Message, state: FSMContext):
#     db_repo = await db.get_repository()
#     async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
#         user = await db_repo.get_user(message.from_user.id)

#         if user is None:
#             logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞."
#                         f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : {message.from_user.id}")
#             await message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
#             return

#         dialog, reply, status_code = await gpt.chat_for_plan(user.messages, 
#                                                              message.text)    
#         json_text = extract_between(reply, "<json>", "</json>")
#         if json_text:
#             reply = re.sub(r"<json>.*?</json>", "", reply, flags=re.DOTALL).strip()
#             json_text = json.loads(json_text)
#         await message.answer(reply)
#     match status_code:
#         case 0:
#             if json_text:
#                 user.goal = json_text.get("goal")
#                 user.plan = json_text.get("plan")
#             else:
#                 user.goal = re.sub(r'^[\s:\-‚Äì‚Äî]+', '', extract_between(reply, "–ò—Ç–∞–∫, —Ç–≤–æ—è —Ü–µ–ª—å", "–í–æ—Ç —Ç–≤–æ–π –ø–ª–∞–Ω"))
#                 user.plan = parse_plan(extract_between(reply, "–í–æ—Ç —Ç–≤–æ–π –ø–ª–∞–Ω:", "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–ª–∞–Ω. –ù–µ —Å–ª–∏–≤–∞–π—Å—è!"))
#             user.messages = dialog
#             await db_repo.update_user(user)
#             user_task = await db_repo.get_user_task(message.from_user.id)
#             if user_task:
#                 user_task.current_step = 0
#                 user_task.deadlines = get_deadlines(user.plan)
#                 await db_repo.update_user_task(user_task)
#             else:
                
#                 result = await db_repo.create_user_task(UserTask(id=message.from_user.id))
#                 if result:
#                     logging.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
#                 else:
#                     logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}."
#                                   "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π, –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π")

#             await state.clear()
#             logging.info("–ë–æ—Ç –≤–µ—Ä–Ω—É–ª –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 0 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
#         case 1:
#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 1 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
#             pass
#         case 2:
#             await state.clear()
#             user.messages = None
#             logging.info("–°—Ç–∞—Ç—É—Å –∫–æ–¥ 2 –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã")
#             await db_repo.update_user(user)


def get_deadlines(plan: Optional[Dict[str, Dict]]) -> List[datetime]:
    if not plan:
        return []

    deadlines = []
    today = datetime.now()
    today = datetime(
        year=today.year,
        month=today.month,
        day=today.day,
        hour=12,
        minute=0,
        second=0,
    )


    for week in plan.keys():        
        for index, task in enumerate(plan[week].keys()):
            if index == 2:
                today += timedelta(days=3)
                deadlines.append(today)
                continue
            today += timedelta(days=2)
            deadlines.append(today)

    return deadlines
