import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.all_inline_keyboards import get_continue_create_kb
from database.database_repository import get_db
from gpt import gpt


class Plan(StatesGroup):
    questions = State()
    let_goal_and_plan = State()


plan_router = Router()


@plan_router.message(F.text == "üìã –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω")
async def start_create_plan(message: Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state is not None:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, " 
                             "—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?",
                             reply_markup=get_continue_create_kb())
        return
    
    db = await get_db()

    user = await db.get_user(message.from_user.id)

    if user is None:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞")
        message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    dialog, reply, status_code = gpt.chat_for_plan(user.messages, message.text)    

    await message.answer(reply)

    match status_code:
        case 0:
            state.set_state(Plan.questions)
            user.messages = dialog
            db.update_user(user)
        case 1:
            pass
        case 2:
            state.clear()
            user.messages = None
            db.update_user(user)


@plan_router.message(Plan.questions)
async def questions_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    current_q = data.get("current_question", 0)

    if current_q == 5:
        state.set_state(Plan.let_goal_and_plan)

    db = await get_db()

    user = await db.get_user(message.from_user.id)

    if user is None:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã."
                      f"–í–æ–ø—Ä–æ—Å –Ω–æ–º–µ—Ä : {current_q}; id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : {message.from_user.id}")
        message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    dialog, reply, status_code = gpt.chat_for_plan(user.messages, message.text)    

    await message.answer(reply)

    match status_code:
        case 0:
            user.messages = dialog
            db.update_user(user)
        case 1:
            pass
        case 2:
            state.clear()
            user.messages = None
            db.update_user(user)


@plan_router.message(Plan.let_goal_and_plan)
async def let_goal_and_plan(message: Message, state: FSMContext):
    db = await get_db()

    user = await db.get_user(message.from_user.id)

    if user is None:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞."
                      f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : {message.from_user.id}")
        message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    dialog, reply, status_code = gpt.chat_for_plan(user.messages, message.text)    

    await message.answer(reply)

    match status_code:
        case 0:
            user.messages = dialog
            db.update_user(user)
            state.clear()
        case 1:
            pass
        case 2:
            state.clear()
            user.messages = None
            db.update_user(user)


@plan_router.callback_query(F.data == "delete_data")
async def delete_dialog(call: CallbackQuery, state: FSMContext):
    state.clear()
    try:
        db = await get_db()
        user = await db.get_user(call.message.from_user.id)
        user.messages = None
        db.update_user(user)
        call.message.answer("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞!")
    except Exception:
        call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:(")
