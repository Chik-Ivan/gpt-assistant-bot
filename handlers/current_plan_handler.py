import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.context import FSMContext
from database.core import db
from create_bot import bot
from database.models import User
from typing import Optional
from keyboards.all_inline_keyboards import get_continue_create_kb


current_plan_router = Router()


async def check_plan(user_id: int, message: Message, state: FSMContext) -> Optional[User]:
    cur_state = await state.get_state()

    logging.info(f"CUR_STATE: {cur_state}")

    if cur_state is not None:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –ø—ã—Ç–∞—é—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞, " 
                            "–≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                             reply_markup=get_continue_create_kb())
        return None
    
    db_repo = await db.get_repository()
    user = await db_repo.get_user(user_id)

    if user is None:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞")
        await message.answer("–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return None
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω, id: {user.id}")
    
    return user


@current_plan_router.message(F.text=="üéØ –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å")
async def get_current_goal(message: Message, state: FSMContext):
    async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
        user = await check_plan(message.from_user.id, message, state)
        if not user:
            return
        await message.answer(f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å: {user.goal}" if user.goal else "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ü–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω")


@current_plan_router.message(F.text=="üóíÔ∏è –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω")
async def get_cuurent_plan(message: Message, state: FSMContext):
    async with ChatActionSender(bot=bot, chat_id=message.chat.id, action="typing"):
        user = await check_plan(message.from_user.id, message, state)
        if not user:
            return
        plan = user.plan
        if not plan:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π \"üìã –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω\", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")

        text = ["–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n"]
        for week, tasks in plan.items():
            text.append(f"{week}:\n")
            for task_name, task_value in tasks.items():
                text.append(f"{task_name}: {task_value}\n")
            text.append("\n")
        text.append("–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!")
        text = "".join(text[:-2])
        await message.answer(text)
